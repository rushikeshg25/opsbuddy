// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: ingestion.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "opsbuddy.sdk.ingestion";

export interface IngestEventResponse {
  success: boolean;
}

export interface IngestEventRequest {
  logs: LogEntry[];
  serviceId: string;
  authToken: string;
}

export interface LogEntry {
  timestamp: string;
  message: string;
}

function createBaseIngestEventResponse(): IngestEventResponse {
  return { success: false };
}

export const IngestEventResponse: MessageFns<IngestEventResponse> = {
  encode(message: IngestEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestEventResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: IngestEventResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IngestEventResponse>, I>>(base?: I): IngestEventResponse {
    return IngestEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IngestEventResponse>, I>>(object: I): IngestEventResponse {
    const message = createBaseIngestEventResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseIngestEventRequest(): IngestEventRequest {
  return { logs: [], serviceId: "", authToken: "" };
}

export const IngestEventRequest: MessageFns<IngestEventRequest> = {
  encode(message: IngestEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.logs) {
      LogEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.serviceId !== "") {
      writer.uint32(18).string(message.serviceId);
    }
    if (message.authToken !== "") {
      writer.uint32(26).string(message.authToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.logs.push(LogEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestEventRequest {
    return {
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => LogEntry.fromJSON(e)) : [],
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      authToken: isSet(object.authToken) ? globalThis.String(object.authToken) : "",
    };
  },

  toJSON(message: IngestEventRequest): unknown {
    const obj: any = {};
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => LogEntry.toJSON(e));
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.authToken !== "") {
      obj.authToken = message.authToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IngestEventRequest>, I>>(base?: I): IngestEventRequest {
    return IngestEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IngestEventRequest>, I>>(object: I): IngestEventRequest {
    const message = createBaseIngestEventRequest();
    message.logs = object.logs?.map((e) => LogEntry.fromPartial(e)) || [];
    message.serviceId = object.serviceId ?? "";
    message.authToken = object.authToken ?? "";
    return message;
  },
};

function createBaseLogEntry(): LogEntry {
  return { timestamp: "", message: "" };
}

export const LogEntry: MessageFns<LogEntry> = {
  encode(message: LogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== "") {
      writer.uint32(10).string(message.timestamp);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogEntry {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: LogEntry): unknown {
    const obj: any = {};
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogEntry>, I>>(base?: I): LogEntry {
    return LogEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogEntry>, I>>(object: I): LogEntry {
    const message = createBaseLogEntry();
    message.timestamp = object.timestamp ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

export type IngestionServiceService = typeof IngestionServiceService;
export const IngestionServiceService = {
  ingestLogBatch: {
    path: "/opsbuddy.sdk.ingestion.IngestionService/IngestLogBatch",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IngestEventRequest): Buffer => Buffer.from(IngestEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): IngestEventRequest => IngestEventRequest.decode(value),
    responseSerialize: (value: IngestEventResponse): Buffer => Buffer.from(IngestEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): IngestEventResponse => IngestEventResponse.decode(value),
  },
} as const;

export interface IngestionServiceServer extends UntypedServiceImplementation {
  ingestLogBatch: handleUnaryCall<IngestEventRequest, IngestEventResponse>;
}

export interface IngestionServiceClient extends Client {
  ingestLogBatch(
    request: IngestEventRequest,
    callback: (error: ServiceError | null, response: IngestEventResponse) => void,
  ): ClientUnaryCall;
  ingestLogBatch(
    request: IngestEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: IngestEventResponse) => void,
  ): ClientUnaryCall;
  ingestLogBatch(
    request: IngestEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: IngestEventResponse) => void,
  ): ClientUnaryCall;
}

export const IngestionServiceClient = makeGenericClientConstructor(
  IngestionServiceService,
  "opsbuddy.sdk.ingestion.IngestionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): IngestionServiceClient;
  service: typeof IngestionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
